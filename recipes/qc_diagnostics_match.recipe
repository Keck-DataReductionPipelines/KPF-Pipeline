# UPDATE THE DESCRIPTION BELOW
#
# This recipe is used to manually produce a set of QLP outputs that match the 
# fullpath config variable.  It can be used to produce QLP for a single data 
# level (L0, 2D, L1, L2, masters) for a single datecode (YYYYDDMM) or 
# combinations.  
# All of the examples below are executed using the command  
#     > kpf -c configs/qc_diagnostics_match.cfg -r recipes/qc_diagnostics_match.recipe
# but with different values for the config variable 'fullpath'.
#
# Example - compute L0 data products for KP.20230724.48905.30:
#    fullpath = '/data/L0/20230724/KP.20230724.48905.30.fits'
#
# Example - compute L0/2D/L1/L2 data products for KP.20230724.48905.30:
#    fullpath = '/data/??/20230724/KP.20230724.48905.30*.fits'
#
# Example - compute L0/2D/L1/L2 data products for all ObsID on a date:
#    fullpath = '/data/??/20230724/KP.*.fits'
#
# Example - compute L0/2D/L1/L2 data products for all ObsID in a range 
#    of ten dates:
#    fullpath = '/data/??/2023072?/KP.*.fits'
#
# Example - compute masters data products for all files on a range of ten dates:
#    fullpath = '/data/masters/2023072?/*.fits'

from modules.Utils.string_proc import level_from_kpffile
from modules.Utils.string_proc import date_from_kpffile
from modules.Utils.string_proc import date_from_path
from modules.Utils.string_proc import filename_from_fullfile

for input_file in find_files(config.ARGUMENT.fullpath):
    datecode = date_from_kpffile(input_file)
    level = level_from_kpffile(input_file)

    if level == '2D':
        data_level_str = '2D'
        kpf_object = kpf0_from_fits(input_file, data_type='KPF')
    if level == 'L1':
        data_level_str = 'L1'
        kpf_object = kpf1_from_fits(input_file, data_type='KPF')
    if level == 'L2':
        data_level_str = 'L2'
        kpf_object = kpf2_from_fits(input_file, data_type='KPF')
    
    invoke_subrecipe("./recipes/quality_control.subrecipe")
    invoke_subrecipe("./recipes/diagnostics.subrecipe")

    datecode = date_from_kpffile(input_file)
    fn = filename_from_fullfile(input_file)
    output_file = config.ARGUMENT.outdir + '/' + data_level_str + '/' +datecode + '/' + fn

    result = to_fits(kpf_object, output_file)

