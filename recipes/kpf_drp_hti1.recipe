## primitives from modules.
# L0 level imports
from modules.Utils.orientation_ref_reader import OrientationReference
from modules.Utils.overscan_subtract import OverscanSubtraction
from modules.Utils.amplifier_mask import AmplifierMask
from modules.query_db_l0_file.src.query_db_l0_file_framework import QueryDBL0FileFramework

# L1 level imports
from modules.order_trace.src.order_trace import OrderTrace
from modules.spectral_extraction.src.order_rectification import OrderRectification
from modules.spectral_extraction.src.spectral_extraction import SpectralExtraction
from modules.order_trace.src.order_mask import OrderMask
from modules.wavelength_cal.src.alg import WaveInterpolation          
from modules.wavelength_cal.src.wavelength_cal import WaveInterpolate
from modules.blaze.src.blaze import AddBlaze

# L2 level imports
from modules.radial_velocity.src.radial_velocity_init import RadialVelocityInit
from modules.radial_velocity.src.radial_velocity import RadialVelocity
from modules.radial_velocity.src.radial_velocity_reweighting_ref import RadialVelocityReweightingRef
from modules.radial_velocity.src.radial_velocity_reweighting import RadialVelocityReweighting
from modules.spectral_extraction.src.bary_corr import BaryCorrTable

# general imports.
from modules.ca_hk.src.ca_hk_extraction import CaHKExtraction
from modules.Utils.string_proc import str_replace
from modules.Utils.string_proc import date_from_kpffile
from modules.Utils.data_handler import ExtCopy
from modules.Utils.data_handler import FromCSV
from modules.Utils.data_handler import GetHeaderValue
from modules.Utils.data_handler import SetHeaderValue
from modules.Utils.data_handler import SelectObs
from modules.image_processing.src.image_process import ImageProcessing
from database.modules.query_db_nearest_master_files.src.query_db_nearest_master_files_framework import QueryDBNearestMasterFilesFramework
from database.modules.query_db_one_nearest_master_file.src.query_db_one_nearest_master_file_framework import QueryDBOneNearestMasterFileFramework
from modules.quality_control_exposure.src.quality_control_exposure_framework import QualityControlExposureFramework
from modules.quality_control.src.quality_control_framework import QualityControlFramework
from modules.read_noise.src.read_noise_framework import ReadNoiseFramework
from modules.var_exts.src.var_exts_framework import VarExtsFramework
from modules.quicklook.src.diagnostics_framework import DiagnosticsFramework
from modules.calibration_lookup.src.calibration_lookup import CalibrationLookup

# set the flags for each process

do_l0_to_2d = config.ARGUMENT.do_l0_to_2d
do_order_trace = config.ARGUMENT.do_order_trace
do_spectral_extraction = config.ARGUMENT.do_spectral_extraction
do_rv = config.ARGUMENT.do_rv
do_rv_reweighting = config.ARGUMENT.do_rv_reweighting
do_hk = config.ARGUMENT.do_hk
do_bk_subtraction = config.ARGUMENT.do_bk_subtraction
do_bc = config.ARGUMENT.do_bc
do_outlier = config.ARGUMENT.do_outlier_rejection
do_only_drift = config.ARGUMENT.do_only_drift

# data type of data model, 'KPF' for kpf data.
data_type = config.ARGUMENT.data_type
# if overwrite the existing data
overwrite = config.ARGUMENT.overwrite

# if copy wavelength solution data to L1 from file samples with wls data.
do_sp_wavecopy = config.ARGUMENT.do_wavecopy_in_sp

# Peroform wavelength interpolation
do_db_query_for_before_after_master_files = config.WLS_INTERPOLATION.do_db_query_for_before_after_master_files 

# file path for lev0 and lev1 data
lev0_file_path = ""
lev1_file_path = ""

if context.watch:
	sel_obsid = context.date_dir
	file_path = context.file_path

	# do spectral extraction if 2D data is made after watching L0, then do 2D->l1->l2
	if 'L0' in file_path:
		lev0_file_path = str_replace(file_path, 'L0', '2D')
		lev0_file_path = str_replace(lev0_file_path, '.fits', '_2D.fits')
		lev1_file_path = str_replace(lev0_file_path, '2D', 'L1')
		# do_order_trace = False

	# do spectral extraction if 2D data is watched, do 2D->l1->l2
	# assume masters is operating on 2D files
	if '2D' in file_path or 'masters' in file_path:
		lev0_file_path = file_path
		do_l0_to_2d = False
		if 'masters' in file_path:
			lev1_file_path = str_replace(file_path, '.fits', '_L1.fits')
		else:
			do_order_trace = False
			lev1_file_path = str_replace(file_path, '2D', 'L1')

	# do rv if L1 data is watched, do l1->l2
	if 'L1' in file_path:
		lev1_file_path = file_path
		lev0_file_path = str_replace(file_path, 'L1', '2D')
		do_order_trace = False
		do_spectral_extraction = False
		do_l0_to_2d = False
		do_bc = False
		do_hk = False

else:
	sel_obsid = context.date_dir
	file_path = context.file_path

	# if not including 2D or L1, the flag is set as what kpf_drp.cfg sets.
	# if including 2D, do l0->l1->l2
	if '2D' in file_path:
		do_order_trace = False
		do_spectral_extraction = True
		do_rv = True
		# do_rv_reweighting = True

	# if including L1, do l1->l2
	if 'L1' in file_path:
		do_order_trace = False
		do_spectral_extraction = False
		do_bc = False
		do_hk = False
		do_rv = True
		# do_rv_reweighting = True

	# if doing reweighted L2
	if 'L2' in file_path:
		do_order_trace = False
		do_spectral_extraction = False
		do_rv = False
		do_bc = False
		do_hk = False
		# do_rv_reweighting = True

## set path to output and input (for 2D, flat and masters) data
# date dir for 2D, masters input and L1 and L2 output.
date_dir = sel_obsid + '/'

output_dir = config.ARGUMENT.output_dir
input_2d_dir = config.ARGUMENT.input_dir_root + date_dir
masters_data_dir = config.ARGUMENT.masters_dir

## general purpose variables
ccd_list = config.ARGUMENT.ccd_list
lev0_stem_suffix = config.ARGUMENT.output_lev0_suffix
lev1_stem_suffix = config.ARGUMENT.output_lev1_suffix
lev2_stem_suffix = config.ARGUMENT.output_lev2_suffix
fits_ext = '.fits'
csv_ext = '.csv'

poly_degree = config.ARGUMENT.fitting_poly_degree
ccd_idx=config.ARGUMENT.ccd_idx

rect_method = config.ARGUMENT.rectification_method
extract_method = config.ARGUMENT.extraction_method
orderlet_names = config.ARGUMENT.orderlet_names
flat_rect = '_'+rect_method

## full path for wavelength solution sample files for each fiber
wls_list = config.ARGUMENT.wls_fits
wave_fits = []
for wls in wls_list:
	wave_fits = wave_fits + [output_dir + wls]

## do L0->2D conversion for watch mode
if do_l0_to_2d:
    invoke_subrecipe("./recipes/watchfor_kpf_l0.recipe")

# Override wave_fits list with optional database query for nearest WLS master file.
do_db_query_for_one_nearest_wls_master_file = config.ARGUMENT.do_db_query_for_one_nearest_wls_master_file
date_dir_db_query = context.date_dir
cal_file_level = config.ARGUMENT.cal_file_level
contentbitmask = config.ARGUMENT.contentbitmask
cal_type_pairs = config.ARGUMENT.cal_type_pairs
max_cal_file_age = config.ARGUMENT.max_cal_file_age


#    origin: origin of the image to be processed
data_row_range = [0, -1]
data_col_range = [0, -1]
origin = [data_col_range[0], data_row_range[0]]

#    lev0_flat_pattern: input flat fits => /data/2D/<date_dir_flat>/<flat_file>
#    output_order_trace: output path => /data/order_trace/<date_dir_flat>/
lev0_flat_pattern = config.ARGUMENT.flat_file
# use the full path of ourder trace files defind in config
orderlet_gap_pixels = config.ARGUMENT.orderlet_gap_pixels

if lev0_file_path:
    lev0_science_pattern = lev0_file_path
else:
    lev0_science_pattern = input_2d_dir + '*' + fits_ext

output_extraction = output_dir + config.ARGUMENT.output_extraction + date_dir
wave_to_ext = config.ARGUMENT.wave_to_ext
orderlet_widths_ccds = config.ARGUMENT.orderlet_widths_ccds

if rect_method != 'norect':
	output_clip = output_extraction + config.ARGUMENT.output_clip + rect_method + '/'
else:
	output_clip = None
orders_per_ccd = config.ARGUMENT.orders_per_ccd
s_bary_idx = [0, orders_per_ccd[0]]

if lev1_file_path:
	input_lev1_pattern = lev1_file_path
else:
	input_lev1_pattern = output_extraction + '*' + lev1_stem_suffix + fits_ext
output_rv = output_dir + config.ARGUMENT.output_rv + date_dir
output_rv_rw = output_rv + config.ARGUMENT.output_rv_reweighting
bc_path = output_dir + config.ARGUMENT.output_barycorr
lev2_pattern = output_rv + '*' + lev2_stem_suffix + fits_ext

reweighting_method = config.ARGUMENT.reweighting_method
reweighting_masks = config.ARGUMENT.reweighting_enable_masks
data_ext_rv = config.ARGUMENT.orderlet_names_rv
ccf_ext_names = config.ARGUMENT.ccf_ext
rv_ext = config.ARGUMENT.rv_ext
is_rv_cal = config.ARGUMENT.rv_correct_by_cal
if 'static' in reweighting_method:
	static_ccf_ratio = config.ARGUMENT.static_ccf_ratio
else:
	static_ccf_ratio = None
rv_start_x = config.ARGUMENT.rv_start_x
rv_end_x = config.ARGUMENT.rv_end_x

input_hk_pattern = lev0_science_pattern

## path containing ca_hk trace file and wavelength table
input_hk_data_dir = output_dir
hk_fiber_list = config.ARGUMENT.hk_fiber_list
hk_spec_exts = config.ARGUMENT.hk_extract_exts
hk_wave_exts = config.ARGUMENT.hk_wave_exts
hk_trace_table = input_hk_data_dir + config.ARGUMENT.hk_trace_path
hk_wavelength_csvs = config.ARGUMENT.hk_wavelength_path
hk_wavelength_tables = []
for hk_w in hk_wavelength_csvs:
	hk_wavelength_tables = hk_wavelength_tables + [input_hk_data_dir + hk_w]

if "*" in lev0_flat_pattern:
	# for masters we need to add the date_dir part in the recipe because the config
	# doesn't know about date_dir
	ll0 = output_dir + date_dir + lev0_flat_pattern
else:
	ll0 = lev0_flat_pattern

flat_file_date_dir = context.date_dir
input_flat_file = output_dir + flat_file_date_dir + "/kpf_" + flat_file_date_dir + "_master_flat.fits"

if not exists(input_flat_file):

    # CalibrationLookup input datetime is one minute past the midnight boundary to ensure it is well past the selection threshold.
    dt_string =  date_dir[0] + date_dir[1] + date_dir[2] + date_dir[3] +\
             "-" + date_dir[4] + date_dir[5] + "-" + date_dir[6] + date_dir[7] + "T00:01:00.000000"
    cals = CalibrationLookup(dt_string)
    input_flat_file = cals['flat']

_, short_flat_file = split(input_flat_file)
flat_stem, flat_ext = splitext(short_flat_file)

trace_list = []
b_all_traces = False
lev0_flat_rect = None
ccd_stack = '_STACK'

if do_order_trace:
	trace_list = []
	flat_data = None

	if exists(input_flat_file):
		# read in flat fits file to produce KPF0 instance
		flat_data = kpf0_from_fits(input_flat_file)
		b_all_traces = True

		# loop to do order trace per ccd in case the order trace result file doesn't exist, and output to trace_list
		for idx in ccd_idx:
			ccd = ccd_list[idx]
			# get order trace file name defined in config file
			output_lev0_trace_csv = str_replace(input_flat_file, fits_ext, '_' + ccd + csv_ext)
			trace_list = trace_list + [output_lev0_trace_csv]
			if overwrite or not exists(output_lev0_trace_csv):
				order_result_data = OrderTrace(flat_data, data_extension=ccd+ccd_stack,
					result_path=output_lev0_trace_csv, is_output_file=True,
					data_col_range=data_col_range, data_row_range=data_row_range,
					fitting_poly_degree=poly_degree, orders_ccd=orders_per_ccd[idx],
					do_post=True, orderlet_gap_pixels=orderlet_gap_pixels, overwrite=overwrite)

			b_all_traces = b_all_traces and exists(output_lev0_trace_csv)

	output_lev0_flat_rect = str_replace(input_flat_file, fits_ext, flat_rect+fits_ext)
	lev0_flat_rect = flat_data

	# generate rectification result to flat level0 to avoid repeating the same process in spectral extraction

	if overwrite or not exists(output_lev0_flat_rect):
		# do rectification on the flat data in case the order trace result files for all ccds exist.
		# b_lev0_rect: a boolean to determine if continuing to do OrderRectification and produce output_lev0_flat_rect

		b_lev0_rect = lev0_flat_rect != None and b_all_traces
		if b_lev0_rect:
			for idx in ccd_idx:
				ccd = ccd_list[idx]
				# no clip file if rect_method == 'norect'
				# or clip_file = output_clip + flat_stem + '_' + ccd
				clip_file = None
				trace_file = trace_list[idx]

				if b_lev0_rect:
					lev0_flat_rect = OrderRectification(None, lev0_flat_rect,
							orderlet_names=orderlet_names[idx],
							trace_file=trace_file, data_extension=ccd,
							flat_extension = ccd+ccd_stack,
							rectification_method=rect_method,
							clip_file=clip_file,
							origin=origin, poly_degree=poly_degree)

				# if lev0_flat_rect is not produced, the order rectfication stops here.
				b_lev0_rect = b_lev0_rect and lev0_flat_rect != None
			if b_lev0_rect:
				result = to_fits(lev0_flat_rect, output_lev0_flat_rect)

lev1_list = []
outlier_mask_path = config.ARGUMENT.outlier_mask_path

if do_spectral_extraction or do_hk or do_bc:
	lev0_flat_rect = None

	# prepare bias, dark data for ca_hk
	if do_hk:
		hk_dark_data = config.ARGUMENT.hk_dark_fits
		hk_bias_data = config.ARGUMENT.hk_bias_fits
		if hk_dark_data:
			hk_dark_data = kpf0_from_fits(input_hk_data_dir + hk_dark_data, data_type = data_type)
		else:
			hk_dark_data = None

		if hk_bias_data:
			hk_bias_data = kpf0_from_fits(input_hk_data_dir + hk_bias_data, data_type=data_type)
		else:
			hk_bias_data = None

	# loop through ccd and L0 to do spectral extraction
	lev0_files = find_files(lev0_science_pattern)
	for input_lev0_file in lev0_files:
		# lev0_data is KPF0 instance for input_lev0_file
		lev0_data = kpf0_from_fits(input_lev0_file, data_type=data_type)
		dt_string = GetHeaderValue(lev0_data, 'DATE-MID')
		cals = CalibrationLookup(dt_string)
		start_order = cals['start_order']
		output_order_trace = cals['ordertrace']
		order_trace_flat = cals['traceflat']
		smooth_lamp_file = str_replace(cals['smoothlamp'], '.fits', '_L1.fits')

		# prepare trace files and rectified L0 flat data for spectral extraction
		if do_spectral_extraction:
			# existence of flat and trace files
			# output_lev0_flat_rect = output_order_trace + flat_stem + flat_rect + fits_ext
			output_lev0_flat_rect = str_replace(order_trace_flat, fits_ext, flat_rect+fits_ext)
			if exists(output_lev0_flat_rect):
				lev0_flat_rect = kpf0_from_fits(output_lev0_flat_rect, data_type=data_type)

			if not trace_list:
				b_all_traces = True
				for idx in ccd_idx:
					lev0_trace_csv = output_order_trace[idx]
					trace_list = trace_list + [lev0_trace_csv]
					b_all_traces = b_all_traces and exists(lev0_trace_csv)


		# this used to denote the level 0 data before background subtraction
		lev0_data_no_bk = kpf0_from_fits(input_lev0_file, data_type=data_type)

		_, short_lev0_file = split(input_lev0_file)
		lev1_stem, lev1_ext = splitext(short_lev0_file)

		# lev1_stem is w/o "_2D" suffix
		if lev0_stem_suffix != None:
			if lev0_stem_suffix in lev1_stem:
				lev1_stem = str_replace(lev1_stem, lev0_stem_suffix, "")
		output_lev1_file = output_extraction + lev1_stem + lev1_stem_suffix + fits_ext

		is_raw = 1
		if rect_method in input_lev0_file:
		   is_raw = 0
		if lev1_stem_suffix in input_lev0_file:
		   is_raw = 0
		if lev2_stem_suffix in input_lev0_file:
		   is_raw = 0

		# produce level 1 by spectral extraction if overwrite or L1 file doesn't exist
		if (is_raw == 1) and (overwrite or not exists(output_lev1_file)):
			b_level1_sp = False

			# do spectral extraction if do_spectral_extraction, rectified flat data existing and all trace results exist.
			if do_spectral_extraction and (lev0_flat_rect != None) and b_all_traces:
				b_level1_sp = True

			# loop through ccd to do spectral extraction
			if b_level1_sp:
				# do background subtraction
				if do_bk_subtraction:
					order_mask = None
					# create order mask for background subtraction
					for idx in ccd_idx:
						if orderlet_widths_ccds:
							orderlet_widths = orderlet_widths_ccds[idx]
						else:
							orderlet_widths = []
						order_mask = OrderMask(lev0_data, order_mask, orderlet_names=orderlet_names[idx],
								start_order=start_order[idx], trace_file=trace_list[idx],
								data_extension=ccd_list[idx],
								orderlet_widths=orderlet_widths, full_coverage=1)
					# update L0 by background subtraction
					if order_mask != None:
						lev0_data = ImageProcessing(lev0_data, order_mask, ccd_list, data_type, None)
						#output_lev0_bk = input_2d_dir + '/bk/' + lev1_stem + fits_ext
						#to_fits(lev0_data, output_lev0_bk)
				op_data = None
				if outlier_mask_path == None:
					outlier_mask_file = ''
				else:
					outlier_mask_file = outlier_mask_path + "/" + context.date_dir + "/" + short_lev0_file

				for idx in ccd_idx:
					ccd = ccd_list[idx]
					order_names = orderlet_names[idx]
					trace_file = trace_list[idx]
					var_ccd = str_replace(ccd, '_CCD', '_VAR')
					clip_file = None

					op_data = SpectralExtraction(lev0_data, lev0_flat_rect, op_data,
								orderlet_names=order_names,
								orderlets_on_image=order_names,
								total_order_per_ccd=orders_per_ccd,
								start_order=start_order[idx],
								ccd_index = idx,
								rectification_method=rect_method, extraction_method=extract_method,
								clip_file=clip_file, data_extension=ccd, trace_file=trace_file,
								flat_extension=ccd+ccd_stack,
								do_outlier_rejection=do_outlier, outlier_file=outlier_mask_file,
								var_extension=var_ccd,
								spec_no_bk = lev0_data_no_bk)

				if op_data != None:
				
					# Quality Control & Diagnostics - L1 level
					# (this should be moved below CaHK, but there are several to_fits calls for L1 -- let's fix this)
					data_level_str = 'L1'
					kpf_object = op_data
					obj = GetHeaderValue(kpf_object, 'OBJECT')
					invoke_subrecipe("./recipes/quality_control.subrecipe")
					invoke_subrecipe("./recipes/diagnostics.subrecipe")
					op_data = kpf_object
					result = to_fits(op_data, output_lev1_file)

			# copy wls to the proper extension of lev1 data
			if do_sp_wavecopy and exists(output_lev1_file):
				output_data = kpf1_from_fits(output_lev1_file, data_type = data_type)
				obs_date_time = GetHeaderValue(output_data,'DATE-MID')
				if do_db_query_for_before_after_master_files == True:
					invoke_subrecipe("recipes/wls_interpolation.subrecipe") #HTI
					output_data = interpolated_l1
					
					# etalon drift correction
					invoke_subrecipe("recipes/drift_correction.subrecipe")
					output_data = output_l1

				else:
					for idx in ccd_idx:
						if wave_fits[idx] != None and exists(wave_fits[idx]):
							# wavecal_data will be replaced by wavelength interpolation.
							wavecal_data = kpf1_from_fits(wave_fits[idx], data_type=data_type)
							for ext in wave_to_ext[idx]:
								ExtCopy(wavecal_data, ext, ext, to_data_model=output_data) # only this needs changed.
					SetHeaderValue(output_data, 'WLSFILE', wave_fits[0])

				# Add blaze extensions
				if exists(smooth_lamp_file):
					smooth_lamp_l1 = kpf1_from_fits(smooth_lamp_file, data_type=data_type)
					blaze_output_list = AddBlaze(output_data, smooth_lamp_l1)

					exit_code = blaze_output_list[0]
					new_l1_obj = blaze_output_list[1]
					if exit_code == 1:
						output_data = new_l1_obj 

				# Quality Control - L1 level
				# (this should be moved below CaHK, but there are several to_fits calls for L1 -- let's fix this)
				data_level_str = 'L1'
				kpf_object = output_data
				invoke_subrecipe("./recipes/quality_control.subrecipe")
				invoke_subrecipe("./recipes/diagnostics.subrecipe")
				output_data = kpf_object

				result = to_fits(output_data, output_lev1_file)

			if do_bc and exists(output_lev1_file):
				# add bary correction result to existing L1 file
				output_data = kpf1_from_fits(output_lev1_file, data_type = data_type)
				t_order = 0
				for idx in ccd_idx:
					t_order = t_order + orders_per_ccd[idx]

				# all extensions of same ccd in wls has the same data
				for idx in ccd_idx:
					output_data = BaryCorrTable(lev0_data, output_data, t_order, orders_per_ccd[idx],
								start_bary_index=s_bary_idx[idx], wls_ext=wave_to_ext[idx][0])

				# Quality Control - L1 level
				# (this should be moved below CaHK, but there are several to_fits calls for L1 -- let's fix this)
				data_level_str = 'L1'
				kpf_object = output_data
				invoke_subrecipe("./recipes/quality_control.subrecipe")
				invoke_subrecipe("./recipes/diagnostics.subrecipe")
				output_data = kpf_object

				result = to_fits(output_data, output_lev1_file)

			# do ca_hk extraction
			if do_hk:
				# add ca_hk extraction result to existing L1 file or create a new L1 file if L1 file doesn't exist
				if not exists(output_lev1_file):
					output_data = None
				else:
					output_data = kpf1_from_fits(output_lev1_file, data_type = data_type)

				output_data = CaHKExtraction(lev0_data, hk_trace_table, hk_fiber_list, output_data, output_exts=hk_spec_exts,
						output_wave_exts=hk_wave_exts,
						dark=hk_dark_data, wave_files=hk_wavelength_tables)

				if output_data != None:

					# Quality Control - L1 level
					# (this should be consolidated with QC above, but there are several to_fits calls for L1 -- let's fix this)
					data_level_str = 'L1'
					kpf_object = output_data
					invoke_subrecipe("./recipes/quality_control.subrecipe")
					invoke_subrecipe("./recipes/diagnostics.subrecipe")
					output_data = kpf_object

					result = to_fits(output_data, output_lev1_file)


if do_rv or do_rv_reweighting:
	rv_star_dir = masters_data_dir

	# L1 area to be processed
	area_def = [[0, orders_per_ccd[0]-1, rv_start_x, rv_end_x], [0, orders_per_ccd[1]-1, rv_start_x, rv_end_x]]

	if not lev1_list:
		lev1_list = find_files(input_lev1_pattern)

	# select L1 files from lev1_list by using SelectObs, a primitive to filter files from a file list based on selection rule, selection_ref.
	# all files in lev1_list are selected if list_socal is None.
	if do_rv:
		list_socal = None
		selected_lev1_files = SelectObs(lev1_list, selection_ref=list_socal, observation_id=sel_obsid)
	else:
		selected_lev1_files = []

	ratio_refs = []
	if 'static' in reweighting_method and do_rv_reweighting:
		for idx in ccd_idx:
			ccf_ratio_file = static_ccf_ratio[idx]
			t_segment = area_def[idx][1] -  area_def[idx][0] + 1
			ratio_ref = RadialVelocityReweightingRef(None, reweighting_method,
							t_segment, cf_hdu_name=ccf_ext_names[idx],
							is_ratio_data = True,
							ccf_ratio_file=ccf_ratio_file, ccf_start_index=area_def[idx][0])
			ratio_refs = ratio_refs + [ratio_ref]

	# iterating the loop to do rv on each L1 from the list 
	for input_lev1_file in selected_lev1_files:
		_, short_lev1 = split(input_lev1_file)
		short_lev2 = str_replace(short_lev1, lev1_stem_suffix, lev2_stem_suffix)
		output_lev2_file = output_rv + short_lev2

		# do rv if overwrite or L2 output doesn't exist
		rv_data = None
		if overwrite or not exists(output_lev2_file):
			lev1_data = kpf1_from_fits(input_lev1_file, data_type=data_type)

			# Mask bad amplifiers in 4 amp modes
			lev1_data = AmplifierMask(lev1_data)

			rv_init = RadialVelocityInit(start_time="2021-03-01", l1_data=lev1_data, bc_corr_path=bc_path, test_data_path=rv_star_dir)

			if rv_init != None:
				for idx in ccd_idx:
					ratio_ref = None
					rw_mask = None
					# rewighting if the reweighted L2 at the same directory as unweighted L2.
					if ratio_refs and output_rv == output_rv_rw and do_rv_reweighting:
						ratio_ref = ratio_refs[idx]
						rw_mask = reweighting_masks[idx]
					rv_data = RadialVelocity(lev1_data, rv_init, rv_data,
						data_ext_rv[idx], ccf_ext=ccf_ext_names[idx], rv_ext=rv_ext,
						area_def=area_def[idx], start_seg=area_def[idx][0], end_seg=area_def[idx][1],
						rv_set=idx, ccf_engine='c', start_bary_index=s_bary_idx[idx], rv_correction_by_cal=is_rv_cal,
						reweighting_method=reweighting_method,
						input_ref=ratio_ref, reweighting_masks=rw_mask )
				if rv_data != None:

					# Quality Control - L2 level
					# (there are several to_fits calls for L2 -- let's fix this)
					data_level_str = 'L2'
					kpf_object = rv_data
					invoke_subrecipe("./recipes/quality_control.subrecipe")
					invoke_subrecipe("./recipes/diagnostics.subrecipe")
					rv_data = kpf_object

					result = to_fits(rv_data, output_lev2_file)

		# do reweighting on each L2 in case the rewighting directory is different from the unweighted L2.
		if 'static' in reweighting_method and do_rv_reweighting:
			if exists(output_lev2_file) and output_rv != output_rv_rw:
				lev2_rv = kpf2_from_fits(output_lev2_file, data_type=data_type)
				reweighted_output = output_rv_rw + short_lev2
				for idx in ccd_idx:
					ratio_ref = None
					rw_mask = None
					if ratio_refs:
						ratio_ref = ratio_refs[idx]
						rw_mask = reweighting_masks[idx]

					if ratio_ref is not None:
						t_segment = area_def[idx][1] -  area_def[idx][0] + 1
						lev2_rv = RadialVelocityReweighting(lev2_rv, reweighting_method, ratio_ref,
								t_segment, ccf_ext=ccf_ext_names[idx],
								rv_ext=rv_ext,  rv_ext_idx=idx, ccf_start_index=area_def[idx][0],
								reweighting_masks=rw_mask)
				if lev2_rv is not None:

					# Quality Control - L2 level
					# (there are several to_fits calls for L2 -- let's fix this)
					data_level_str = 'L2'
					kpf_object = output_data
					invoke_subrecipe("./recipes/quality_control.subrecipe")
					invoke_subrecipe("./recipes/diagnostics.subrecipe")
					output_data = kpf_object

					result = to_fits(lev2_rv, reweighted_output)
