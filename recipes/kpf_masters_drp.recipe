###################################################################################################
# Pipeline to generate all calibration files.
# Inputs are from /data/kpf/L0/*.fits or /data/kpf/L0/date_dir/*.fits if context.date_dir is true.
###################################################################################################

from modules.Utils.string_proc import str_replace
from modules.Utils.pick_inputs_masters_drp import PickInputsMastersDRP
from modules.Utils.orientation_ref_reader import OrientationReference
from modules.Utils.overscan_subtract import OverscanSubtraction
from modules.master_bias.src.master_bias_framework import MasterBiasFramework
from modules.master_dark.src.master_dark_framework import MasterDarkFramework
from modules.master_flat.src.master_flat_framework import MasterFlatFramework
from modules.master_arclamp.src.master_arclamp_framework import MasterArclampFramework
from modules.quality_control.src.quality_control_framework import QualityControlFramework
from modules.quicklook.src.diagnostics_framework import DiagnosticsFramework
from modules.calibration_lookup.src.calibration_lookup import CalibrationLookup

flat_objects = config.FLAT.flat_objects
# Normally standard_flat_object = "autocal-flat-all"
standard_flat_object = flat_objects[0]

smoothlamppattern_path = config.FLAT.smoothlamppattern_path
ordermask_path = config.FLAT.ordermask_path

data_type = config.ARGUMENT.data_type
overwrite = config.ARGUMENT.overwrite
date_dir = context.date_dir

if date_dir is None:
    search_string = config.PICK_INPUTS_MASTERS_DRP.input_dir + "/" + '*.fits'
else:
    search_string = config.PICK_INPUTS_MASTERS_DRP.input_dir + "/" + date_dir + "/" + '*.fits'

    # Set the datetime is one minute past the midnight boundary to ensure it is well past the selection threshold.
    dt_string =  date_dir[0] + date_dir[1] + date_dir[2] + date_dir[3] +\
                 "-" + date_dir[4] + date_dir[5] + "-" + date_dir[6] + date_dir[7] + "T00:01:00.000000"
    cals = CalibrationLookup(dt_string)
    ordermask_path = cals['ordermask']
    smoothlamppattern_path = cals['smooth_lamp_pattern']

exptime_minimum = config.DARK.exptime_minimum

all_bias_files_list,\
    all_dark_files_list,\
    all_flat_files_list,\
    all_arclamp_files_list,\
    bias_objects_auto,\
    dark_objects_auto,\
    arclamp_objects_auto = PickInputsMastersDRP(data_type,search_string,exptime_minimum,standard_flat_object)

channel_datasec_ncols_green = config.OVERSCAN_SUBTRACTION.channel_datasec_ncols_green
channel_datasec_nrows_green = config.OVERSCAN_SUBTRACTION.channel_datasec_nrows_green
channel_datasec_ncols_red = config.OVERSCAN_SUBTRACTION.channel_datasec_ncols_red
channel_datasec_nrows_red = config.OVERSCAN_SUBTRACTION.channel_datasec_nrows_red
channel_orientation_ref_path_red = config.OVERSCAN_SUBTRACTION.channel_orientation_ref_path_red
channel_orientation_ref_path_green = config.OVERSCAN_SUBTRACTION.channel_orientation_ref_path_green
overscan_method = config.OVERSCAN_SUBTRACTION.overscan_method
order = config.OVERSCAN_SUBTRACTION.overscan_order
oscan_clip = config.OVERSCAN_SUBTRACTION.overscan_clip
lev0_ffi_ext_red = config.OVERSCAN_SUBTRACTION.lev0_ffi_ext_red
lev0_ffi_ext_green = config.OVERSCAN_SUBTRACTION.lev0_ffi_ext_green
prescan_reg = config.OVERSCAN_SUBTRACTION.prescan_reg
gain_key = config.OVERSCAN_SUBTRACTION.gain_keyword
n_sigma = config.OVERSCAN_SUBTRACTION.n_sigma

if date_dir is None:
    overscan_output_dir = config.OVERSCAN_SUBTRACTION.output_dir
else:
    overscan_output_dir = config.OVERSCAN_SUBTRACTION.output_dir + "/" + date_dir

file_list = all_bias_files_list + all_dark_files_list + all_flat_files_list + all_arclamp_files_list

nlen_file_list = len(file_list)

for raw_file_path in file_list:

    _,file_name_ext = split(raw_file_path)
    file_name,ext = splitext(file_name_ext)
    output_file_name = overscan_output_dir + "/" + file_name + "_2D" + ext
    output_file_exists = exists(output_file_name)

    if output_file_exists:
        file_exists = True
    else:
        file_exists = False

    if overwrite or not output_file_exists:

        # Read in FITS data.
        l0 = kpf0_from_fits(raw_file_path, data_type)

        #---------

        # Diagnostics & Quality Control - L0 level

        kpf_object = l0
        data_level_str = 'L0'

        # Cannot call subrecipes in a loop (does not work correctly).
        #invoke_subrecipe("./recipes/quality_control.subrecipe")
        #invoke_subrecipe("./recipes/diagnostics.subrecipe")

        qc_output_list = QualityControlFramework('KPF', data_level_str, kpf_object, 0)
        exit_code      = qc_output_list[0]
        new_kpf_object = qc_output_list[1]
        # exit_code = 1 is good.
        if exit_code == 1:
            kpf_object = new_kpf_object

        diagnostics_output_list = DiagnosticsFramework(data_level_str, kpf_object, 'all')
        exit_code = diagnostics_output_list[0]
        new_kpf_object = diagnostics_output_list[1]
        # exit_code = 1 is good.
        if exit_code == 1:
            kpf_object = new_kpf_object
        l0 = kpf_object

        #---------

        # Overscan subtraction, first red, then green (the ordering should not matter, except
        # how the FITS object is modified and passed on to subsequent processes in the code below).

        ref_output_red = OrientationReference(channel_orientation_ref_path_red, data_type)

        # compute red-chip ffi
        red_ffi = OverscanSubtraction(l0,
                                      overscan_method,
                                      order,
                                      oscan_clip,
                                      ref_output_red,
                                      lev0_ffi_ext_red,
                                      data_type,
                                      prescan_reg,
                                      gain_key,
                                      channel_datasec_ncols_red,
                                      channel_datasec_nrows_red,
                                      n_sigma)

        ref_output_green = OrientationReference(channel_orientation_ref_path_green, data_type)

        # add green-chip ffi to data containing red-chip ffi
        L0_with_ffi = OverscanSubtraction(red_ffi,
                                          overscan_method,
                                          order,
                                          oscan_clip,
                                          ref_output_green,
                                          lev0_ffi_ext_green,
                                          data_type,
                                          prescan_reg,
                                          gain_key,
                                          channel_datasec_ncols_green,
                                          channel_datasec_nrows_green,
                                          n_sigma)


        #---------

        # Diagnostics & Quality Control - 2D level

        kpf_object = L0_with_ffi
        data_level_str = '2D'

        # Cannot call subrecipes in a loop (does not work correctly).
        #invoke_subrecipe("./recipes/quality_control.subrecipe")
        #invoke_subrecipe("./recipes/diagnostics.subrecipe")

        qc_output_list = QualityControlFramework('KPF', data_level_str, kpf_object, 0)
        exit_code      = qc_output_list[0]
        new_kpf_object = qc_output_list[1]
        # exit_code = 1 is good.
        if exit_code == 1:
            kpf_object = new_kpf_object

        diagnostics_output_list = DiagnosticsFramework(data_level_str, kpf_object, 'all')
        exit_code = diagnostics_output_list[0]
        new_kpf_object = diagnostics_output_list[1]
        # exit_code = 1 is good.
        if exit_code == 1:
            kpf_object = new_kpf_object

        L0_with_ffi = kpf_object

        #---------

        oscan_complete = to_fits(L0_with_ffi, output_file_name)

########################
# Get config parameters so that they are defined regardless of logic branches.
########################

bias_n_sigma = config.BIAS.n_sigma
bias_lev0_ffi_exts = config.BIAS.lev0_ffi_exts

bias_objects_config = config.BIAS.bias_objects

if len(bias_objects_config) == 0:
    bias_objects = bias_objects_auto
else:
    bias_objects = bias_objects_config

masterbias_path = config.BIAS.masterbias_path



dark_n_sigma = config.DARK.n_sigma
dark_lev0_ffi_exts = config.DARK.lev0_ffi_exts

dark_objects_config = config.DARK.dark_objects

if len(dark_objects_config) == 0:
    dark_objects = dark_objects_auto
else:
    dark_objects = dark_objects_config

masterdark_path = config.DARK.masterdark_path



flat_n_sigma = config.FLAT.n_sigma
flat_lev0_ffi_exts = config.FLAT.lev0_ffi_exts
masterflat_path = config.FLAT.masterflat_path

standard_bias_object = "autocal-bias"
standard_dark_object = "autocal-dark"


if date_dir:
    standard_masterbias_path = str_replace(masterbias_path,\
                             '_master_bias.fits',\
                             '_' + date_dir + '_master_bias_' + standard_bias_object + '.fits')
else:
    standard_masterbias_path = str_replace(masterbias_path,\
                             '_master_bias.fits',\
                             '_master_bias_' + standard_bias_object + '.fits')

if date_dir:
    standard_masterdark_path = str_replace(masterdark_path,\
                             '_master_dark.fits',\
                             '_' + date_dir + '_master_dark_' + standard_dark_object + '.fits')
else:
    standard_masterdark_path = str_replace(masterdark_path,\
                             '_master_dark.fits',\
                             '_master_dark_' + standard_dark_object + '.fits')

if date_dir:
    standard_masterflat_path = str_replace(masterflat_path, '_master_flat.fits', '_' + date_dir + '_master_flat.fits')
else:
    standard_masterflat_path = masterflat_path


########################
# Generate master bias.
########################

if all_bias_files_list:

    bias_input_files = overscan_output_dir + "/" + "*_2D.fits"

    for bias_object in bias_objects:

        if date_dir:
            new_masterbias_path = str_replace(masterbias_path,\
                                     '_master_bias.fits',\
                                     '_' + date_dir + '_master_bias_' + bias_object + '.fits')
        else:
            new_masterbias_path = str_replace(masterbias_path,\
                                     '_master_bias.fits',\
                                     '_master_bias_' + bias_object + '.fits')

        exit_list_bias = MasterBiasFramework(data_type,
                                             bias_n_sigma,
                                             bias_input_files,
                                             bias_lev0_ffi_exts,
                                             bias_object,
                                             new_masterbias_path)

new_masterbias_path = standard_masterbias_path


########################
# Generate master dark.
########################

if all_dark_files_list:

    dark_input_files = overscan_output_dir + "/" + "*_2D.fits"

    for dark_object in dark_objects:

        if date_dir:
            new_masterdark_path = str_replace(masterdark_path,\
                                     '_master_dark.fits',\
                                     '_' + date_dir + '_master_dark_' + dark_object + '.fits')
        else:
            new_masterdark_path = str_replace(masterdark_path,\
                                     '_master_dark.fits',\
                                     '_master_dark_' + dark_object + '.fits')

        exit_list_dark = MasterDarkFramework(data_type,
                                             dark_n_sigma,
                                             dark_input_files,
                                             dark_lev0_ffi_exts,
                                             dark_object,
                                             new_masterbias_path,
                                             new_masterdark_path)

new_masterdark_path = standard_masterdark_path


########################
# Generate master flat.
########################

if all_flat_files_list:

    flat_input_files = overscan_output_dir + "/" + "*_2D.fits"

    if date_dir:
        new_masterflat_path = str_replace(masterflat_path, '_master_flat.fits', '_' + date_dir + '_master_flat.fits')
    else:
        new_masterflat_path = masterflat_path

    exit_list_flat = MasterFlatFramework(data_type,
                                         flat_n_sigma,
                                         flat_input_files,
                                         flat_lev0_ffi_exts,
                                         new_masterbias_path,
                                         new_masterdark_path,
                                         new_masterflat_path,
                                         smoothlamppattern_path,
                                         ordermask_path,
                                         standard_flat_object)

new_masterflat_path = standard_masterflat_path


####################################
# Generate master-arclamp products.
####################################

skip_flattening = config.ARCLAMP.skip_flattening
make_arclamp_stacks = config.ARCLAMP.make_arclamp_stacks

if all_arclamp_files_list and make_arclamp_stacks:
    arclamp_n_sigma = config.ARCLAMP.n_sigma
    arclamp_lev0_ffi_exts = config.ARCLAMP.lev0_ffi_exts
    arclamp_objects_config = config.ARCLAMP.arclamp_objects

    if len(arclamp_objects_config) == 0:
        arclamp_objects = arclamp_objects_auto
    else:
        arclamp_objects = arclamp_objects_config

    masterarclamp_path = config.ARCLAMP.masterarclamp_path
    arclamp_input_files = overscan_output_dir + "/" + "*_2D.fits"

    for arclamp_object in arclamp_objects:

        if date_dir:
            new_masterarclamp_path = str_replace(masterarclamp_path,\
                                     '_master_arclamp.fits',\
                                     '_' + date_dir + '_master_arclamp_' + arclamp_object + '.fits')
        else:
            new_masterarclamp_path = str_replace(masterarclamp_path,\
                                     '_master_arclamp.fits',\
                                     '_master_arclamp_' + arclamp_object + '.fits')

        exit_list_arclamp = MasterArclampFramework(data_type,
                                                   arclamp_n_sigma,
                                                   arclamp_input_files,
                                                   arclamp_lev0_ffi_exts,
                                                   arclamp_object,
                                                   new_masterbias_path,
                                                   new_masterdark_path,
                                                   new_masterflat_path,
                                                   new_masterarclamp_path)
