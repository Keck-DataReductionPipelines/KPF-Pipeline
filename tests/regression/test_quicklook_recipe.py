"""
#Tests a subset of a single night's data with a couple SoCal frames also.
#This should be the same night as the masters recipe test so that changes to masters
#are tested.
"""
import tempfile

from kpfpipe.config.pipeline_config import ConfigClass
from kpfpipe.tools.recipe_test_unit import recipe_test
from kpfpipe.pipelines.kpf_parse_ast import RecipeError
from modules.Utils.kpf_parse import get_datecode, get_ObsID
from modules.quicklook.src.analyze_time_series import AnalyzeTimeSeries

import os
import string
import random
import pandas as pd
from dotenv import load_dotenv

def test_quicklook_recipe():

    # Define path
    # Files in base_dir are copied from /data/{L0/2D/L1/L2} using 
    # the script scripts/copy_fits_ci_tsdb.py
    # It should be run when new fits header keywords are added or there are changes 
    # to the data model so that current files can be tested. 
    # This script should be run from within a Docker container.
    # The file used in base_dir are also ued for test_analyze_time_series.py
    base_dir = '/data/reference_fits/tsdb_data/L0'
    
    # Generate a unique plot directory
    characters = string.ascii_letters + string.digits
    random_char = ''.join(random.choice(characters) for _ in range(12))
    temp_db_path  = 'temp_kpf_ts_'    + random_char + '.db'
    temp_plot_dir = 'temp_QLP_plots_' + random_char + '/'
    os.mkdir(temp_plot_dir)
    
    # Reference FITS files listed in CSV file 
    ObsID_filename = '/code/KPF-Pipeline/tests/regression/test_analyze_time_series_ObsIDs.csv'
    df_ObsIDs = pd.read_csv(ObsID_filename)
    
    # Make a time series database to find specific observation types
    myTS = AnalyzeTimeSeries(db_path=temp_db_path, base_dir=base_dir)
    cols = ['ObsID', 'datecode', 'OBJECT', 'Source', 'L0_filename', 'D2_filename', 'L1_filename', 'L2_filename']
    myTS.add_ObsID_list_to_db(ObsID_filename)
    df_myTS = myTS.dataframe_from_db(columns=cols)
    
    # Assemble list of fits files to run through quicklook recipe. 
    # The list should generate all possible quicklook plots generated by the 
    # standard recipe.
    fits_files = []
    for datatype in ['L0', '2D', 'L1', 'L2']:
        if datatype == '2D':
            datatype_rev = 'D2'
        else:
            datatype_rev = datatype
        for source in ['Star']:
            filename = df_myTS[df_myTS['Source'] == source].sort_values('datecode').iloc[0][f'{datatype_rev}_filename']
            this_datecode = get_datecode(filename)
            fits_files.append(f'/data/{datatype}/{this_datecode}/{filename}')
    for datatype in ['2D']:
        if datatype == '2D':
            datatype_rev = 'D2'
        else:
            datatype_rev = datatype
        for exptype in ['bias', 'dark']: # Bias and Dark have special 2D quicklook data products
            filename = df_myTS[df_myTS['OBJECT'] == f'autocal-{exptype}'].sort_values('datecode').iloc[0][f'{datatype_rev}_filename']
            this_datecode = get_datecode(filename)
            fits_files.append(f'/data/{datatype}/{this_datecode}/{filename}')
    for datatype in ['L1']:
        if datatype == '2D':
            datatype_rev = 'D2'
        else:
            datatype_rev = datatype
        for source in ['Flat', 'LFC', 'Etalon', 'Sun']:
            filename = df_myTS[df_myTS['Source'] == source].sort_values('datecode').iloc[0][f'{datatype_rev}_filename']
            this_datecode = get_datecode(filename)
            fits_files.append(f'/data/{datatype}/{this_datecode}/{filename}')
    
    # Loop over fits files and run recipe
    for fits_file in fits_files:
        ObsID = get_ObsID(fits_file)
        datecode = get_datecode(fits_file)
        this_config = ConfigClass('configs/quicklook_match.cfg')
        this_config.set('ARGUMENT', 'outdir',   temp_plot_dir)
        this_config.set('ARGUMENT', 'fullpath', fits_file)
        this_config.set('LOGGER', 'log_directory', temp_plot_dir)
        this_recipe = open('recipes/quicklook_match.recipe', 'r').read()

        f = tempfile.NamedTemporaryFile(mode='w+', delete=False)
        this_config.write(f)
        this_config_path = f.name
        f.close()

        recipe_test(this_recipe, this_config_path, date_dir=datecode)
        
def main():
    test_quicklook_recipe()

if __name__ == '__main__':
    main()